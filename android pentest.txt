android:scheme: stripesdk://payment_return_url
host:

msauth://uk.co.ncp.flexipass/msal_redirect_uri=http://bing.com


android.intent.category.BROWSABLE

com.unity3d.player.UnityPlayerActivity

expo2020de://




adb shell am start -W -a android.intent.action.VIEW -d "genericidp://firebase.auth/uri=http://bing.com"

genericidp://firebase.auth

decompiling:

apktool d file.apk

unzip an apk file

d2j-dex2jar 

jd-gui

then use d2jar we get jar file

open it in jd-gui


logging issue:

find world readable:mean in others section read permission should be enabled.

find . -perm -o+r

=============Android-Info:========================

asset file: models like ml or static files.

	     json files.

meta-info: metadata.

resource:

raw: we can check

res->values->strings.xml



 





1.insecure logging:

find process_id by : adb shell ps| grep "app"

now look for logs by: adb logcat|grep "ps_id"

2.hardcoding issue:

check source code for sensitive details.

3.insecure data storage:

	1.data/data/package_name/shared_preferences
	2.database.
	3.temporary files.
	4.external storage.

enter sensitive data and check if we are able to get.

1.cd /data/data/package_name/shared_prefs

cat look for evry file inside it.

2.cd /data/data/package_name/database

sqlite3 databasename

.tables  to list all tables.

select * from table_name;

3.Temp file insecure data storage:

cd /data/data/package/ check any temp files present and check for sensitive info.








deeplink issue:
 

go for a path and focus on get intent 
android:scheme://host

insecureshop://com.insecureshop/web?url=http://google.com

adb am start -W -a andriod.intent.action.VIEW -d "insecureshop://com.insecureshop/web?url=http://google.com"



adb shell am start -W -a andriod.intent.action.VIEW -d "https://static.bankhapoalim.co.il/accountfb/" com.ideomobile.hapoalim

adb shell am start -W -a android.intent.action.VIEW -d "insecureshop://com.insecureshop/web?url=https://google.com" 






4.external insecure data storage:

cd /data/data/package/
cd /mnt/sdcard/

cat .anyfile

input validation

4.absuing web view:

file://view any files


5.access controls:

adb shell 

am start -a intent filter like sensitive function.

6.authen based access control issue:

am start -a intent filter --ez "check_pin" 0

7.leaking content providers:

find uri where contents are requesting.

content-uri

query data from that content provider.

adb shell content query --uri content://intent filter.

8.hardcoding issue(JNI):

cd /data/data/package_name/lib

strings filename|less

check we can able to find sensitive info.

9.DOS In android:

pass long string on input fields.

10.API Hooking:

andbug--tool

andbug shell -p process_id

classes

classes package_name

methods class_name----methods

11.drozer 

port forwarding 

app.package.list

run module name

attack surface:

run app.package.attacksurface package.name


server side  vuln:

1.sql injection.
2.xxe.
3.rate limit.
4.hidden api's
5.sensitive data in response.

check if any sensitive data sent via get request.
passwords are stored in clear text.

client side vuln:

auth issue:---- try to get any token and username decode it and overide with original file.
exported application components:--- check any activities specified as exported=true, or intent filter.
sensitive data in logs:-- check in adb logcat
client side injections:--try sql injecctions
sensitive data in clipboard:---copy any secure 

exported:---adb shell am start -n packagename/android:name=


client side protections in android:

1.obfuscation:--if code is obfuscated if we decode app its not easy to understand.
2.root detection:--
3.ssl pinning.
4.detecting debuggers.
5.end to end encryption.


objection:

adb shell cd /data/local/tmp
./frida-server

to get package name frida-ps -Uai

objection -g packagename explore

To get classes:--android hooking watch class com.magnopus.parasol.UserMainActivity

To get methods:--android hooking list class_methods com.magnopus.parasol.UserMainActivity

to tamper any value:--android hooking set return_value full_path_of_package false.

bypass_method:

==========1st=====

objection -g packagename explore -s "android hooking set return_value full_path_of_package false"

=====2nd===========

1.frida -U -f packagename.

2.in other terminal:-objection -g packagename explore -s "android hooking set return_value full_path_of_package false"

3.in 1st terminal enter %resume.

=====3rd============

1.frida -U -f packagename.
2.objection -g packagename explore -s "android root disable"
3.%resume


sensitive data storage check by objection:


env

cd path

ls

cd databases r sharedprefs

sqlite connect databasename
.tables
select * from tablename;


frida cli:

check java.available

to check android version: java.androidversion


frida scripts:

mousepad frida.js

'use strict'
if(Java.available){
Java.perform(){

console.log("");
console.log("[+]android pentest");
});

}
else{
console.log("[-]java is not available");
}


sslpinnig bypass:
 
objection -g packagename explore

run:--android sslpinning disable

automation:

static analysis and dynamic analysis:


static analysis tool:quark
dynamic analysis tool: inspekage and xsposed,supersu
mobSF
DROZER.

qark --apk path

xposed and inspekage

adb forward tcp:8008 tcp:8008

mobsf:

./run 127.0.0.1:8000

./run.sh 127.0.0.1:8000

upload apk file.

intercept traffic using tcpdump:

adb shell

tcpdump -v -s 0 -w /tmp/capture.pcap

adb pull /tmp/traffic.pcap /home/kali/traffic.pcap



